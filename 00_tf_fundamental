{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"00_tf_fundamental","provenance":[{"file_id":"/v2/external/notebooks/empty.ipynb","timestamp":1622559249298}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"dgGDVeiYU9he"},"source":["# In this notebook we will learn about the basic concept of tensorflow"]},{"cell_type":"markdown","metadata":{"id":"bGyTCnCFenUg"},"source":["More specificaly we are going to cover\n","\n","\n","1. introduction\n","2. getting more info from tensors\n","3. manipulating tensors\n","4. tensors and numpy\n","5. using tf.function which is used to faster  python function\n","6. using gpu with tensorflow \n","7. exercise"]},{"cell_type":"markdown","metadata":{"id":"NCBRcAM9eUWg"},"source":[" Topics covered:\n","* checking tensorflow version\n","* tf.constant\n","* tf.__.ndim\n","* scalar, vector, matrix\n","* tf.variable\n","* tensor[0].assign(9) with tf.variable only\n","* random tensors\n","* from seed\n","* two random tensors can be same\n","* tf.shuffle\n","* tf.ones/zeros\n","* getting info from tensors (shape, rank, axis or dimension, size)\n","* indexing\n","* expand dimension\n","* manipulating tensors ( operation on tensors like tf.multiply, add, ...)\n","* tf.matmul, tf.tensordot, @, tf.reshape, tf.transpose\n","* changing data type (tf.cast(__, dtype=tf.int16)\n","* Aggregating tensors( min, max, mean, std, variance)\n"]},{"cell_type":"markdown","metadata":{"id":"svVeDdvFVmV0"},"source":["# Intro to tf"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dfISbWwbfo-X","executionInfo":{"status":"ok","timestamp":1625033231409,"user_tz":-330,"elapsed":514,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"85c12d12-18d5-4519-d57a-dfcf4423566d"},"source":["import tensorflow as tf\n","print (tf.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.5.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tu-O3sthgGm6","executionInfo":{"status":"ok","timestamp":1625033232400,"user_tz":-330,"elapsed":69,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"f6216126-1fee-4e67-b266-e865f5f2922e"},"source":["# creating tensors with tf\n","scalar=tf.constant(7)\n","scalar"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int32, numpy=7>"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q5CrEM8fganN","executionInfo":{"status":"ok","timestamp":1625033232402,"user_tz":-330,"elapsed":66,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"08ed5f11-c1da-425a-e405-6680a20fb3c2"},"source":["# checking number of dimension\n","scalar.ndim"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1lIJLwu_jZ3h","executionInfo":{"status":"ok","timestamp":1625033232405,"user_tz":-330,"elapsed":58,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"0cde3da5-effa-44a8-d473-bdc7ca6a0e0d"},"source":["# create vectors\n","vector=tf.constant([10,10])\n","vector"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2,), dtype=int32, numpy=array([10, 10], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l2alWczZjtkJ","executionInfo":{"status":"ok","timestamp":1625033232408,"user_tz":-330,"elapsed":58,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"aaf97839-73a8-4fcb-981d-5fc36a26c4cd"},"source":["# check the dimension of vectors\n","vector.ndim"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-2HyPj4sj5sa","executionInfo":{"status":"ok","timestamp":1625033232412,"user_tz":-330,"elapsed":59,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"4f78361c-4a34-47c9-e623-c966549154ff"},"source":["# create a matrix\n","matrix=tf.constant([[10,10],[20,20]])\n","matrix"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[10, 10],\n","       [20, 20]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3j-IaxBkkHxz","executionInfo":{"status":"ok","timestamp":1625033232415,"user_tz":-330,"elapsed":58,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"e644dced-58a2-4c8e-9c8a-5f8be6e79448"},"source":["matrix.ndim"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"3M3gpjXwkJy0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625033232418,"user_tz":-330,"elapsed":58,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"348e44d3-f23d-4f04-d0d5-99510e4f598d"},"source":["another_matrix=tf.constant([[10.,7,],\n","                            [3.,2,],\n","                            [8.,9.]],dtype=tf.float16) # if u get data_type error we can manipulate dtype.\n","                                                       # . means float\n","another_matrix "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2), dtype=float16, numpy=\n","array([[10.,  7.],\n","       [ 3.,  2.],\n","       [ 8.,  9.]], dtype=float16)>"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4eFVE0I_nN9G","executionInfo":{"status":"ok","timestamp":1625033232420,"user_tz":-330,"elapsed":57,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"64c87ff7-db99-48a6-e429-fc62248e0f0a"},"source":["another_matrix.ndim"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"GGaUeXL5niST"},"source":["### Creating same tensors with tf.variable"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HJispWTy6-sJ","executionInfo":{"status":"ok","timestamp":1625033232422,"user_tz":-330,"elapsed":55,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"c90e08b8-5bbd-4de7-d471-ab9953374196"},"source":["changeable_tensors=tf.Variable([10,7])\n","unchangeable_tensors=tf.constant([10,7])\n","changeable_tensors, unchangeable_tensors"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Variable 'Variable:0' shape=(2,) dtype=int32, numpy=array([10,  7], dtype=int32)>,\n"," <tf.Tensor: shape=(2,), dtype=int32, numpy=array([10,  7], dtype=int32)>)"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e9DOtu_PAd6Y","executionInfo":{"status":"ok","timestamp":1625033232425,"user_tz":-330,"elapsed":55,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"fdc2558a-f1b4-4ec8-f91f-095f110b0f84"},"source":["# as name suggest they are changeable\n","changeable_tensors[0].assign(9)\n","changeable_tensors"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Variable 'Variable:0' shape=(2,) dtype=int32, numpy=array([9, 7], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":305},"id":"A4Ag8KvaDKg8","executionInfo":{"status":"error","timestamp":1625033232445,"user_tz":-330,"elapsed":72,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"60c0ec29-5406-4a7b-b846-f7c53e8222a8"},"source":["unchangeable_tensors[0].assign(6)\n","unchangeable_tensors"],"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-f60c59dd2970>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0munchangeable_tensors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massign\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0munchangeable_tensors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    399\u001b[0m         \u001b[0;32mimport\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnp_config\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    400\u001b[0m         np_config.enable_numpy_behavior()\"\"\".format(type(self).__name__, name))\n\u001b[0;32m--> 401\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    402\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    403\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mstaticmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'tensorflow.python.framework.ops.EagerTensor' object has no attribute 'assign'"]}]},{"cell_type":"markdown","metadata":{"id":"i3flZzBh-4FC"},"source":["## Creating randon tensors\n","random tensors are tensors of some arbitrary size which contain random numbers "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bDjKbkiysuFk","executionInfo":{"status":"ok","timestamp":1624770588200,"user_tz":-330,"elapsed":970,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"007a737d-12d1-4b47-aa97-8d2b6c59428b"},"source":["random_1=tf.random.Generator.from_seed(42)\n","random_1=random_1.normal(shape=(3,2))\n","random_1"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2), dtype=float32, numpy=\n","array([[-0.7565803 , -0.06854702],\n","       [ 0.07595026, -1.2573844 ],\n","       [-0.23193763, -1.8107855 ]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_e5ntG2b33dH","executionInfo":{"status":"ok","timestamp":1624770736559,"user_tz":-330,"elapsed":6,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"913e8aa7-ccda-4c2b-e12f-70f70e153f09"},"source":["random_2=tf.random.Generator.from_seed(42)\n","random_2=random_2.normal(shape=(3,2))\n","random_2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2), dtype=float32, numpy=\n","array([[-0.7565803 , -0.06854702],\n","       [ 0.07595026, -1.2573844 ],\n","       [-0.23193763, -1.8107855 ]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WKCNaHEi4K79","executionInfo":{"status":"ok","timestamp":1624770766122,"user_tz":-330,"elapsed":378,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"017e6ca0-0d21-4472-ee2f-68c66948c82d"},"source":["random_1, random_2, random_1==random_2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(3, 2), dtype=float32, numpy=\n"," array([[-0.7565803 , -0.06854702],\n","        [ 0.07595026, -1.2573844 ],\n","        [-0.23193763, -1.8107855 ]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 2), dtype=float32, numpy=\n"," array([[-0.7565803 , -0.06854702],\n","        [ 0.07595026, -1.2573844 ],\n","        [-0.23193763, -1.8107855 ]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 2), dtype=bool, numpy=\n"," array([[ True,  True],\n","        [ True,  True],\n","        [ True,  True]])>)"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"NkkCfeMs4mFV"},"source":["🧨 <B> Note: </B> they are random numbers even though they are equal\n","it is because we have initialised from_seed"]},{"cell_type":"markdown","metadata":{"id":"u7wxcO7L5K_7"},"source":["## now we will shuffle the order as shuffling dont affect learning."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ob4M22fm6scT","executionInfo":{"status":"ok","timestamp":1624772288975,"user_tz":-330,"elapsed":10,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"fd9e59b2-f8c9-4422-b4e5-602fd53fef2b"},"source":["not_shuffled=tf.constant([[10,7],\n","                          [6,7],\n","                          [7,3]])\n","tf.random.shuffle(not_shuffled)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2), dtype=int32, numpy=\n","array([[ 7,  3],\n","       [ 6,  7],\n","       [10,  7]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VJs9ukKmAx-u","executionInfo":{"status":"ok","timestamp":1624772980982,"user_tz":-330,"elapsed":599,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"6cafe6eb-1099-4c77-c7c6-a3c8adc4a084"},"source":["tf.random.set_seed(42) # here we difined global seed therefore we will get same numbers each time\n","tf.random.shuffle(not_shuffled, seed=42) # again we defined set_seed therefore they will not get shuffled"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 2), dtype=int32, numpy=\n","array([[10,  7],\n","       [ 6,  7],\n","       [ 7,  3]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9nDeBp3XP6fB","executionInfo":{"status":"ok","timestamp":1624877934610,"user_tz":-330,"elapsed":15,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"a0cba354-c3a5-4bbc-fe6a-2ac91cfd44e8"},"source":["# creating tensors of ones\n","tf.ones([10, 7])  # same as np.ones"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(10, 7), dtype=float32, numpy=\n","array([[1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 1., 1., 1.]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"m_l0e74MRPaF"},"source":["#### we can also convert numpy aray into tensors\n","🚩The main diff between numpy and tf is tf can run on GPU"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RZq8N2HmRfrH","executionInfo":{"status":"ok","timestamp":1625026862764,"user_tz":-330,"elapsed":1971,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"b721c2e3-0c60-46b0-cdb5-a440b1505834"},"source":["import numpy as np\n","import tensorflow as tf\n","numpy_A=np.arange(1, 25, dtype=np.int32)\n","numpy_A"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n","       18, 19, 20, 21, 22, 23, 24], dtype=int32)"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uGz0pX5c6dn5","executionInfo":{"status":"ok","timestamp":1624891330857,"user_tz":-330,"elapsed":570,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"ad4505b3-7a80-4f75-b5f4-ebb5f4d33b9d"},"source":["abv=tf.constant(numpy_A, shape=(2, 3, 4)) # shape must be such that when multiplied comes up as 24 as in np.arange(1, 25) that si 24 numbers\n","abv"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 3, 4), dtype=int32, numpy=\n","array([[[ 1,  2,  3,  4],\n","        [ 5,  6,  7,  8],\n","        [ 9, 10, 11, 12]],\n","\n","       [[13, 14, 15, 16],\n","        [17, 18, 19, 20],\n","        [21, 22, 23, 24]]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"JSqfpVTHET8Z"},"source":["## Getting information from tensors"]},{"cell_type":"markdown","metadata":{"id":"P_F2oVqnF01O"},"source":["while dealing with tf we need to keep few things in mind\n","- shape\n","-Rank\n","-Axis or dimension\n","-Size "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AXMdBekvIFc-","executionInfo":{"status":"ok","timestamp":1624941124173,"user_tz":-330,"elapsed":386,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"6d0ed243-092f-4796-b164-97f9511a59fe"},"source":["# rank\n","rank_4_tensors=tf.zeros(shape=[2, 3, 4, 5])\n","rank_4_tensors"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy=\n","array([[[[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]]],\n","\n","\n","       [[[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]],\n","\n","        [[0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.],\n","         [0., 0., 0., 0., 0.]]]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f6DLWhGFIVX_","executionInfo":{"status":"ok","timestamp":1624893034799,"user_tz":-330,"elapsed":321,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"b977a3bf-e25e-4c59-d9c3-00caf1c80911"},"source":["print(\"Datatype of every element:\", rank_4_tensors.dtype)\n","print(rank_4_tensors.ndim)\n","print(rank_4_tensors.shape)\n","print(\"element along 0 axis:\", rank_4_tensors.shape[0])\n","print(\" element along last axis:\", rank_4_tensors.shape[-1])\n","print(\"total number of element:\", tf.size(rank_4_tensors))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Datatype of every element: <dtype: 'float32'>\n","4\n","(2, 3, 4, 5)\n","element along 0 axis: 2\n"," element along last axis: 5\n","total number of element: tf.Tensor(120, shape=(), dtype=int32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"oo-DGigmKDyy"},"source":["## Indexing tensors\n","tensors can be indexed like python list"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2laPpgVUBps6","executionInfo":{"status":"ok","timestamp":1624941211119,"user_tz":-330,"elapsed":344,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"e3ae0ba3-c439-4fa0-a068-df30d548a0d9"},"source":["# getting first two element of each dimension of rank_4_tensors\n","rank_4_tensors[:2, :2, :2, :2]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2, 2, 2), dtype=float32, numpy=\n","array([[[[0., 0.],\n","         [0., 0.]],\n","\n","        [[0., 0.],\n","         [0., 0.]]],\n","\n","\n","       [[[0., 0.],\n","         [0., 0.]],\n","\n","        [[0., 0.],\n","         [0., 0.]]]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zevpRgGtN1bC","executionInfo":{"status":"ok","timestamp":1624944219503,"user_tz":-330,"elapsed":474,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"e53d1056-2ee8-482f-c40d-55d0764647a9"},"source":["rank_2_tensors=tf.constant([[10, 7],\n","                           [3, 5]])\n","rank_2_tensors"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[10,  7],\n","       [ 3,  5]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vN8ii8_gCyox","executionInfo":{"status":"ok","timestamp":1624944277972,"user_tz":-330,"elapsed":724,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"8685ae96-ca7f-4422-bea9-f285d0420ff2"},"source":["#rank_3_tensors=rank_2_tensors[..., tf.newaxis] ### instead of writting(:, :, :) we can write (...) which will include all axis previously described\n","\n","# alternative\n","rank_3_tensors=tf.expand_dims(rank_2_tensors, axis=-1) # -1 mean expand the final axis\n","rank_3_tensors "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2, 1), dtype=int32, numpy=\n","array([[[10],\n","        [ 7]],\n","\n","       [[ 3],\n","        [ 5]]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RRTpByCLKwOd","executionInfo":{"status":"ok","timestamp":1624944307259,"user_tz":-330,"elapsed":377,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"1155ddda-5608-4bb2-9360-35e6367d7aae"},"source":["rank_2_tensors[:, -1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2,), dtype=int32, numpy=array([7, 5], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"JmO4ciYQOmiE"},"source":["## Manipulating tensors ( opertion on tensors)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"89HEy8JJO0Dm","executionInfo":{"status":"ok","timestamp":1624947375846,"user_tz":-330,"elapsed":354,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"cf245489-1b44-40fc-f0b9-97167c4f5cee"},"source":["# there comes all BODMAS rules\n","ten=rank_2_tensors \n","ten+10"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[20, 17],\n","       [13, 15]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_RRXe0QtaNdI","executionInfo":{"status":"ok","timestamp":1624947397522,"user_tz":-330,"elapsed":355,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"37a5c8a3-4101-4a2d-9978-9c65f48b4956"},"source":["ten/7"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=float64, numpy=\n","array([[1.42857143, 1.        ],\n","       [0.42857143, 0.71428571]])>"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"1r2ns4KDbkGQ"},"source":["using tf.__ will be faster"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dI7jd9bvaY_W","executionInfo":{"status":"ok","timestamp":1624947830586,"user_tz":-330,"elapsed":682,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"3171d2af-4a50-4234-f04c-fbb370799a00"},"source":["# using tf.\n","tf.multiply(ten, 10)\n","tf.add(ten, 10)\n","\n","# we can also use tf.math.___\n","tf.math.multiply(ten, 10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[100,  70],\n","       [ 30,  50]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"gtlFtcSTbRKc"},"source":["but the default tensors is unchanged"]},{"cell_type":"markdown","metadata":{"id":"wWEn4ibvb1Fo"},"source":["## Matrix multiplication"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gQgIC08oIhtf","executionInfo":{"status":"ok","timestamp":1625026932773,"user_tz":-330,"elapsed":439,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"6103525e-e708-4fe4-b738-33020503e5a7"},"source":["tensors=tf.constant([[[10, 5, 4],\n","                      [7, 4, 2],\n","                      [4, 9, 1]]])\n","print(tensors)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tf.Tensor(\n","[[[10  5  4]\n","  [ 7  4  2]\n","  [ 4  9  1]]], shape=(1, 3, 3), dtype=int32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DnH3VS4eJywO","executionInfo":{"status":"ok","timestamp":1625026980509,"user_tz":-330,"elapsed":15,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"7d3b46cf-649f-45a2-de11-3805ab5eba74"},"source":["tf.matmul(tensors, tensors) # it is different frrom tensors*tensors as it is matrix multiplication"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 3, 3), dtype=int32, numpy=\n","array([[[151, 106,  54],\n","        [106,  69,  38],\n","        [107,  65,  35]]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"avl5eufuJ8ff","executionInfo":{"status":"ok","timestamp":1625027105112,"user_tz":-330,"elapsed":416,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"79469603-7b3e-4471-dc2f-7044b5c4049c"},"source":["# @ symbol is used in python operator for matrix multiplication\n","tensors @ tensors # this is same as matrix multiplication"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 3, 3), dtype=int32, numpy=\n","array([[[151, 106,  54],\n","        [106,  69,  38],\n","        [107,  65,  35]]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":346},"id":"DKYTyA4AKawb","executionInfo":{"status":"error","timestamp":1625028023595,"user_tz":-330,"elapsed":374,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"bfc617fc-48ea-4698-8aaf-dc003d406a5c"},"source":["# what if matrix have different shape \n","# like (3x2)a nd (3x2), then we need to change the shape to (3z2) and (2z3)\n","tf.reshape(tensors, shape=(_, _))\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"InvalidArgumentError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-88b3d1129f9c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# what if matrix have different shape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# like (3x2)a nd (3x2), then we need to change the shape to (3z2) and (2z3)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    204\u001b[0m     \u001b[0;34m\"\"\"Call target, and fall back on dispatchers if there is a TypeError.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 206\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    207\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m       \u001b[0;31m# Note: convert_to_eager_tensor currently raises a ValueError, not a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/ops/array_ops.py\u001b[0m in \u001b[0;36mreshape\u001b[0;34m(tensor, shape, name)\u001b[0m\n\u001b[1;32m    193\u001b[0m     \u001b[0mA\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0mHas\u001b[0m \u001b[0mthe\u001b[0m \u001b[0msame\u001b[0m \u001b[0mtype\u001b[0m \u001b[0;32mas\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    194\u001b[0m   \"\"\"\n\u001b[0;32m--> 195\u001b[0;31m   \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgen_array_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    196\u001b[0m   \u001b[0mtensor_util\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaybe_set_static_shape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    197\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/ops/gen_array_ops.py\u001b[0m in \u001b[0;36mreshape\u001b[0;34m(tensor, shape, name)\u001b[0m\n\u001b[1;32m   8391\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8392\u001b[0m       return reshape_eager_fallback(\n\u001b[0;32m-> 8393\u001b[0;31m           tensor, shape, name=name, ctx=_ctx)\n\u001b[0m\u001b[1;32m   8394\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_SymbolicException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8395\u001b[0m       \u001b[0;32mpass\u001b[0m  \u001b[0;31m# Add nodes to the TensorFlow graph.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/ops/gen_array_ops.py\u001b[0m in \u001b[0;36mreshape_eager_fallback\u001b[0;34m(tensor, shape, name, ctx)\u001b[0m\n\u001b[1;32m   8416\u001b[0m   \u001b[0m_attrs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"T\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_attr_T\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Tshape\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_attr_Tshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8417\u001b[0m   _result = _execute.execute(b\"Reshape\", 1, inputs=_inputs_flat, attrs=_attrs,\n\u001b[0;32m-> 8418\u001b[0;31m                              ctx=ctx, name=name)\n\u001b[0m\u001b[1;32m   8419\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0m_execute\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmust_record_gradient\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8420\u001b[0m     _execute.record_gradient(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m: Input to reshape is a tensor with 9 values, but the requested shape has 8 [Op:Reshape]"]}]},{"cell_type":"code","metadata":{"id":"m8j9tqOhN5Im"},"source":["# shortcut\n","tf.matmul(x, tf.reshape(tensor, shape=(2, 5)))\n","# we can do same with transpose\n","x, tf.transpose(x), tf.reshape(x, shape=(2, 3)) # transpose changes the shape\n","# therefore we can try transpose instead of reshape`\n","# matrix multiplication is also reffered as dot product"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9mdJcFkyYpGa"},"source":[" we can perform matrix multiplication using:\n"," * tf.matmul\n"," * tf.tensordot()\n"," * @"]},{"cell_type":"markdown","metadata":{"id":"ziQzG-7tY0lQ"},"source":["changing tensor datatype :\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e_KftV2VfMoH","executionInfo":{"status":"ok","timestamp":1625032742680,"user_tz":-330,"elapsed":504,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"3f09aa3d-aa14-40b5-b99d-ea0b75969bae"},"source":["tensors"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 3, 3), dtype=int32, numpy=\n","array([[[10,  5,  4],\n","        [ 7,  4,  2],\n","        [ 4,  9,  1]]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nLxgjpM7f9K4","executionInfo":{"status":"ok","timestamp":1625032764677,"user_tz":-330,"elapsed":437,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"4fc4f07d-74ae-4c4f-d696-aea6dd5df450"},"source":["tensors.dtype"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tf.int32"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5kwbM6VqgCjY","executionInfo":{"status":"ok","timestamp":1625032865224,"user_tz":-330,"elapsed":415,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"34f7913f-3c33-4253-fb3b-a208b6ef45cd"},"source":["B=tf.cast(tensors, dtype=tf.float16)\n","B"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 3, 3), dtype=float16, numpy=\n","array([[[10.,  5.,  4.],\n","        [ 7.,  4.,  2.],\n","        [ 4.,  9.,  1.]]], dtype=float16)>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"FL3vDMXdga4n"},"source":["## Aggregating tensors:\n","* this mean considering them from multiple values down to smaller amount of values."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6-P5zpVZhuN7","executionInfo":{"status":"ok","timestamp":1625033590547,"user_tz":-330,"elapsed":9,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"7670760c-7a36-4e20-afb3-b40929895f49"},"source":["B"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 3, 3), dtype=float16, numpy=\n","array([[[10.,  5.,  4.],\n","        [ 7.,  4.,  2.],\n","        [ 4.,  9.,  1.]]], dtype=float16)>"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-HkiDPbgjLNY","executionInfo":{"status":"ok","timestamp":1625033602681,"user_tz":-330,"elapsed":485,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"0fc4e29a-8009-46e2-ec81-3af7240badc9"},"source":["tf.abs(B)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 3, 3), dtype=float16, numpy=\n","array([[[10.,  5.,  4.],\n","        [ 7.,  4.,  2.],\n","        [ 4.,  9.,  1.]]], dtype=float16)>"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"XhRlWLn6jOjx"},"source":["### following are the forms of aggregation :\n","* min\n","* max\n","* mean of tensors\n","* sum of tensors"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EgbUcmexjfVd","executionInfo":{"status":"ok","timestamp":1625033920460,"user_tz":-330,"elapsed":414,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"3065bd10-f51b-4941-fa69-6fa19f5abac4"},"source":["# create random tensors with value between 0-100\n","random=tf.constant(np.random.randint(0, 100, size=50))\n","random"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(50,), dtype=int64, numpy=\n","array([23,  7, 26, 80, 79, 78, 67, 65,  2, 73,  3, 63, 79,  6, 57, 52,  6,\n","       49, 67, 20, 48, 11,  6,  3, 15, 46, 96, 94,  5, 13, 17,  0, 31, 66,\n","       22, 67, 88, 98,  0, 91, 10,  6, 10, 42, 85, 16, 85, 37, 33, 15])>"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EF4M9hjjkYQP","executionInfo":{"status":"ok","timestamp":1625033965028,"user_tz":-330,"elapsed":670,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"c3b68cd6-27f5-4789-ec44-aa78cd49adcf"},"source":["random.shape, random.ndim, tf.size(random)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([50]), 1, <tf.Tensor: shape=(), dtype=int32, numpy=50>)"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LOfrQ0EBkjSh","executionInfo":{"status":"ok","timestamp":1625034742203,"user_tz":-330,"elapsed":379,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"6d2e215d-b0a6-4c86-d310-81a4fd793f0a"},"source":["# Aggregation\n","tf.reduce_min(random)\n","tf.reduce_max(random)\n","tf.reduce_mean(random)\n","tf.reduce_sum(random)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int64, numpy=2058>"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"BRY9WItCnlVQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625282770568,"user_tz":-330,"elapsed":3343,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"26ca9eb6-d1e8-489d-9279-045c3ddcb7b3"},"source":["# for variance and std variance we need to import tensorflow_probability\n","import tensorflow_probability as tfp\n","import tensorflow as tf\n","tensors=tf.constant([[[10, 7, 9],\n","                      [4, 6, 8],\n","                      [2, 5, 1]]])\n","tfp.stats.variance(tensors)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 3), dtype=int32, numpy=\n","array([[0, 0, 0],\n","       [0, 0, 0],\n","       [0, 0, 0]], dtype=int32)>"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H-Em-MmHuoB8","executionInfo":{"status":"ok","timestamp":1625120874912,"user_tz":-330,"elapsed":548,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"74d4e69a-efe0-4105-f54b-8e5b6082f664"},"source":["# finding the standard deviation:\n","# tf.reduce_std(tensors) \n","# this doesn't run because or std we need to think something else\n","#tf.math.reduce_std(tensors)\n","# even this doesn't run. sow e will go to documentation\n","tf.math.reduce_std(tf.cast(tensors, dtype=tf.float32))\n","# so the problem was with datatype as in error it was asking input must be real or complex that means problem is with datatype"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=2.8974233>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"jSZ9klFLvlsR"},"source":["### How to find poaitional minimum and maximum"]},{"cell_type":"code","metadata":{"id":"nNU05NHqw-pL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625282770572,"user_tz":-330,"elapsed":26,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"7bf1bd58-f006-493d-db9d-2620ee7bfa0c"},"source":["d=tf.random.uniform(shape=[50])\n","d"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(50,), dtype=float32, numpy=\n","array([0.99264824, 0.58449686, 0.416929  , 0.5225146 , 0.3044045 ,\n","       0.28752446, 0.09891593, 0.21025264, 0.6228235 , 0.18972826,\n","       0.5278511 , 0.73097014, 0.39066005, 0.70081043, 0.38455057,\n","       0.37100565, 0.79714   , 0.22505033, 0.25435078, 0.21772122,\n","       0.9223819 , 0.63206136, 0.6277709 , 0.687783  , 0.9954276 ,\n","       0.00906837, 0.00168312, 0.5127313 , 0.79638815, 0.96880937,\n","       0.00212705, 0.9461111 , 0.5323882 , 0.43275225, 0.9873352 ,\n","       0.9608091 , 0.950495  , 0.10919428, 0.11313784, 0.5032208 ,\n","       0.43922067, 0.3861686 , 0.1039474 , 0.56912017, 0.16505468,\n","       0.16929746, 0.8316406 , 0.35243106, 0.59463537, 0.38688207],\n","      dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a5xm-c32Zooh","executionInfo":{"status":"ok","timestamp":1625282925317,"user_tz":-330,"elapsed":345,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"03455f30-71b2-4886-96c3-3b9f2463a5ca"},"source":["tf.argmax(d) # it says max value lies at position at numpy=24"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=int64, numpy=24>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sZOfGvYQaU49","executionInfo":{"status":"ok","timestamp":1625283036009,"user_tz":-330,"elapsed":409,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"1e679594-5c46-4573-f5d3-bfd689101071"},"source":["# to find the max value\n","d[tf.argmax(d)] # i.e. max value is 0.9954"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=0.9954276>"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uIfbE8GaakeE","executionInfo":{"status":"ok","timestamp":1625283085374,"user_tz":-330,"elapsed":954,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"a8e7b074-000b-4210-8ea5-5d0f7cf91371"},"source":["# M-2\n","tf.reduce_max(d)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=0.9954276>"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"XJibUHV-a6Jh"},"source":["# checking tf.argmax is same as reduce_max\n","assert d[tf.argmax(d)]==tf.reduce_max(d) # assert ,method checks if there is error"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_bt-BtUgbhGq","executionInfo":{"status":"ok","timestamp":1625283257789,"user_tz":-330,"elapsed":377,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"51b47c58-a68d-45b7-de52-9dbc3fdc30e9"},"source":["d[tf.argmax(d)]==tf.reduce_max(d) # returned as true"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=bool, numpy=True>"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"EAjSI5kWbmCM"},"source":["* Accordingly same steps for minimun"]},{"cell_type":"markdown","metadata":{"id":"37sF-Fqdb318"},"source":["### squeezing tensors (removing all single dimension) "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"26Ad-5AJcTcm","executionInfo":{"status":"ok","timestamp":1625284343031,"user_tz":-330,"elapsed":425,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"9a501ac5-e39f-4407-9eb6-951b0c3cc9f4"},"source":["# creating random tensors\n","e=tf.constant(tf.random.uniform(shape=[50]), shape=(1,1,1,1,50))\n","e"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 1, 1, 1, 50), dtype=float32, numpy=\n","array([[[[[0.30295825, 0.7689258 , 0.16013873, 0.02017903, 0.6101248 ,\n","           0.48015368, 0.18511307, 0.24624848, 0.8177879 , 0.7401192 ,\n","           0.3872515 , 0.17852402, 0.05024064, 0.7769058 , 0.39707637,\n","           0.40897107, 0.07909882, 0.6479778 , 0.5290817 , 0.62080956,\n","           0.3748752 , 0.71188927, 0.77314115, 0.21159446, 0.34293938,\n","           0.5378046 , 0.4226452 , 0.82417035, 0.07800353, 0.28182256,\n","           0.82822883, 0.975456  , 0.5823293 , 0.378294  , 0.2293235 ,\n","           0.02290916, 0.23720098, 0.94385386, 0.87873447, 0.1686784 ,\n","           0.47533512, 0.48253524, 0.25945067, 0.11553562, 0.97769773,\n","           0.35892606, 0.09836853, 0.11696637, 0.2911631 , 0.12199008]]]]],\n","      dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p_xE73Vlf4i7","executionInfo":{"status":"ok","timestamp":1625284385564,"user_tz":-330,"elapsed":356,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"087d4a4f-cf75-4263-cf16-f965b0238199"},"source":["e.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([1, 1, 1, 1, 50])"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EVkTeUVAfJ4z","executionInfo":{"status":"ok","timestamp":1625284405384,"user_tz":-330,"elapsed":416,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"6b56e65a-e1e4-4e3f-b796-13d1620c57e7"},"source":["tensor_squeezed=tf.squeeze(e)\n","tensor_squeezed.shape # simply it reduces single dimension"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([50])"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"BZd7YON1f3L9"},"source":["## One-hot encoding"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JsfO7bp8gNVD","executionInfo":{"status":"ok","timestamp":1625284928649,"user_tz":-330,"elapsed":415,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"0a063abf-3e51-48b8-f2f3-a0074d15df18"},"source":["# One-hot encoding is a type of numrical encoding\n","# creating a list of indecies\n","some_list=[1, 4, 6, 9]\n","# we need to define depth of one-hot we have\n","tf.one_hot(some_list, depth=10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(4, 10), dtype=float32, numpy=\n","array([[0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]], dtype=float32)>"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_YvFeLKUgtTs","executionInfo":{"status":"ok","timestamp":1625285075343,"user_tz":-330,"elapsed":688,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"a5214448-bbdc-4c47-f86d-5ba09fd11707"},"source":["# specifyinng customm values for one-hot enccoding\n","tf.one_hot(some_list, depth=10, on_value=\"I love deep learning\", off_value=\"this is not as expected\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(4, 10), dtype=string, numpy=\n","array([[b'this is not as expected', b'I love deep learning',\n","        b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected'],\n","       [b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected',\n","        b'I love deep learning', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected'],\n","       [b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected',\n","        b'I love deep learning', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected'],\n","       [b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'this is not as expected',\n","        b'this is not as expected', b'I love deep learning']],\n","      dtype=object)>"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"5TeN0lfqihwi"},"source":["## Tf interact beautifully with numpy"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DFA60EYYjo6H","executionInfo":{"status":"ok","timestamp":1625285711859,"user_tz":-330,"elapsed":372,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"c1ab0843-d8d2-4f6c-ef22-c36bf3323ce9"},"source":["import numpy as np\n","numpy_f=tf.constant(np.array([3, 5, 6, 1]))\n","numpy_f"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(4,), dtype=int64, numpy=array([3, 5, 6, 1])>"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BSyis4ZSjxGt","executionInfo":{"status":"ok","timestamp":1625285742637,"user_tz":-330,"elapsed":432,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}},"outputId":"b9fdd580-b692-4529-ecab-d47e0fac5348"},"source":["tensor_f=tf.constant([3, 5, 6, 1])\n","numpy_f.dtype, tensor_f.dtype"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tf.int64, tf.int32)"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"nIvtC5TWk7mo","executionInfo":{"status":"ok","timestamp":1625285868172,"user_tz":-330,"elapsed":369,"user":{"displayName":"Abhishek Srivastava","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GizIF1tp0Moslf2sneFlllnPy-9iMoQVUM68MCLrQ=s64","userId":"08613957628194990688"}}},"source":["# default data type of tensor and numpy is different"],"execution_count":39,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iz-lzzvHljJ2"},"source":["# End of fundamental session"]},{"cell_type":"code","metadata":{"id":"gd5tStsWmCrL"},"source":[""],"execution_count":null,"outputs":[]}]}